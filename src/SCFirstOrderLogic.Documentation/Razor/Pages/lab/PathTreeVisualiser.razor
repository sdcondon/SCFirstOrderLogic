@page "/lab/path-tree-visualiser"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using SCFirstOrderLogic.SentenceManipulation
@using SCFirstOrderLogic.TermIndexing
@using static SCFirstOrderLogic.SentenceCreation.SentenceFactory;

<h3>Lab - Path Tree Visualiser <Button Clicked="@(() => explanationModal!.Show())" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button></h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive visualiser for path trees, as implemented by SCFirstOrderLogic (in the SCFirstOrderLogic.TermIndexing namespace).
            </p>
            <p>
                Path trees are an indexing structure for terms that are particularly good for looking up instances of a query term.
                A path tree's structure is essentially the same as the structure of terms themselves. That is, a path tree is
                essentially all of its stored terms merged together - with extra branching at (the root and) each function
                parameter, to allow for all of the different argument values that have been stored. Attached to each leaf
                of a path tree is a list of all (values associated with the) terms in which the leaf's path appears.
            </p>
            <p>
                Note that:
            </p>
            <ul>
                <li>This lab is admittedly a little rough around the edges with regards to the tree view itself (currently just nested unordered lists) and input validation. It'll be iterated upon.</li>
                <li>You can add terms to the tree by entering them into the Term text box and clicking the 'Add' button.</li>
                <li>When parsing the term, identifiers not followed by any parentheses (to indicate a function) will be interpreted as variables if they feature in the "variables" text box. Otherwise they will be interpreted as zero-arity functions (i.e. constants).</li>
                <li>Guidance for writing terms as strings can be found on the "getting started" page.</li>
                <li>The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/PathTreeVisualiser.razor">here</a>.</li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm Model=@formData Context="editContext" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="variablesText">Variables (comma-separated)</label>
        <InputText class="form-control" id="variablesText" spellcheck="false" @bind-Value=formData.Variables />
        <ValidationMessage For="@(() => formData.Variables)" />
    </div>
    <div class="form-group">
        <label for="queryText">Term</label>
        <InputText class="form-control" id="queryText" spellcheck="false" @bind-Value=formData.Term />
        <ValidationMessage For="@(() => formData.Term)" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" @onclick="@(() => HandleAddSubmission(editContext))" class="btn btn-primary">Add</button>
        <button type="submit" @onclick="@(() => HandleRemoveAllSubmission(editContext))" class="btn btn-primary">Remove All</button>
    </div>
</EditForm>

<hr/>

<ul class="mt-4">
    @RenderTree(("(root node)", pathTreeRootNode))
</ul>

@code {
    private Modal? explanationModal;
    private FormData formData = new FormData("u, v, w, x, y, z", string.Empty);

    private PathTreeDictionaryNode<Term> pathTreeRootNode;
    private PathTree pathTree;

    public PathTreeVisualiser()
    {
        pathTreeRootNode = new PathTreeDictionaryNode<Term>();
        pathTree = new PathTree(pathTreeRootNode);
    }

    private RenderFragment RenderTree((string rootLabel, IPathTreeParameterNode<Term> rootNode) a)
    {
        return @<li>
            @a.rootLabel
            <ul>
                @foreach (var (childNodeKey, childNode) in a.rootNode.Children)
                {
                    var childNodeLabel = childNodeKey switch
                    {
                        PathTreeFunctionNodeKey functionNodeKey => $"function: {functionNodeKey.Identifier} (arity {functionNodeKey.ChildElementCount})",
                        PathTreeVariableNodeKey variableNodeKey => $"variable: #{variableNodeKey.Ordinal}",
                        _ => throw new ArgumentException(nameof(a.rootNode))
                    };

                    @RenderTree((childNodeLabel, childNode))
                }
            </ul>
        </li>;
    }

    private RenderFragment RenderTree((string label, IPathTreeArgumentNode<Term> node) a)
    {
        return@<li>
            @a.label
            <ul>
                @if (a.node.Children.Count > 0)
                {
                    for (int i = 0; i < a.node.Children.Count; i++)
                    {
                        @RenderTree(($"argument #{i}", a.node.Children[i]))
                    }
                }
                else
                {
                    foreach (var (key, value) in a.node.Values)
                    {
                        <li>value: @value</li>
                    }
                }
            </ul>
        </li>;
    }

    private void HandleAddSubmission(EditContext editContext)
    {
        if (editContext.Validate())
        {
            // TODO-FEATURE: probably useful to offer term parsing..
            var sentence = SentenceParser.BasicParser.Parse($"forall {formData.Variables}, P({formData.Term})");
            var visitor = new TermExtractor();
            visitor.Visit(sentence);
            pathTree.Add(visitor.Term!);
            StateHasChanged();
        }
    }

    private void HandleRemoveAllSubmission(EditContext editContext)
    {
        pathTreeRootNode = new PathTreeDictionaryNode<Term>();
        pathTree = new PathTree(pathTreeRootNode);
        StateHasChanged();
    }

    private class FormData(string variables, string term) : IValidatableObject
    {
        public string Variables { get; set; } = variables;

        public string Term { get; set; } = term;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Yes, could cache the parse results to avoid parsing multiple times, but not worth it for now at least.
            // TODO-FEATURE: Some "TryParse.." methods might be useful - they'd certainly make this method a bit cleaner.
            // TODO-FEATURE: If we had a ParseError exception type, we could perhaps highlight the offending text.
            List<ValidationResult> errors = new();
            try
            {
                var sentence = SentenceParser.BasicParser.Parse($"forall {Variables}, P({Term})");
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(Term) }));
            }

            return errors;
        }
    }

    private class TermExtractor : RecursiveSentenceVisitor
    {
        public Term? Term { get; private set; }

        public override void Visit(Predicate predicate)
        {
            Term = predicate.Arguments.Single();
        }
    }
}