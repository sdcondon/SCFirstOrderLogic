@page "/lab/discrimination-tree-visualiser"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using SCFirstOrderLogic.SentenceManipulation
@using SCFirstOrderLogic.TermIndexing
@using static SCFirstOrderLogic.SentenceCreation.SentenceFactory;
@inject IJSRuntime JS

<h3>Lab - Discrimination Tree Visualiser <a data-bs-toggle="modal" data-bs-target="#infoModal" href="#"><span class="bi bi-info-circle" aria-hidden="true"></span></a></h3>

<div class="modal fade" id="infoModal" tabindex="-1" aria-labelledby="infoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="infoModalLabel">Lab Explanation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    This page is an interactive visualiser for discrimination trees, as implemented by SCFirstOrderLogic (in the SCFirstOrderLogic.TermIndexing namespace).
                </p>
                <p>
                    Discrimination trees are an indexing structure for terms that are particularly good for looking up generalisations of a query term.
                    Each path from root to leaf in a discrimination tree consists of a depth-first traversal of the elements of the term that the leaf represents.
                </p>
                <p>
                    Note that:
                </p>
                <ul>
                    <li>This lab is admittedly a little rough around the edges with regards to the tree view itself (currently just nested unordered lists) and input validation. It'll be iterated upon.</li>
                    <li>You can add terms to the tree by entering them into the Term text box and clicking the 'Add' button.</li>
                    <li>When parsing the term, identifiers not followed by any parentheses (to indicate a function) will be interpreted as variables if they feature in the "variables" text box. Otherwise they will be interpreted as zero-arity functions (i.e. constants).</li>
                    <li>Guidance for writing terms as strings can be found on the "getting started" page.</li>
                    <li>The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/DiscriminationTreeVisualiser.razor">here</a>.</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<EditForm Model=@formData Context="editContext" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="variablesText">Variables (comma-separated)</label>
        <InputText class="form-control" id="variablesText" @bind-Value=formData.Variables />
        <ValidationMessage For="@(() => formData.Variables)" />
    </div>
    <div class="form-group">
        <label for="queryText">Term</label>
        <InputText class="form-control" id="queryText" @bind-Value=formData.Term />
        <ValidationMessage For="@(() => formData.Term)" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" @onclick="@(() => Add(editContext))" class="btn btn-primary">Add</button>
        <button type="submit" @onclick="@(() => RemoveAll(editContext))" class="btn btn-primary">Remove All</button>
    </div>
</EditForm>

@{
    void RenderDiscriminationTreeNode(string label, IDiscriminationTreeNode<Term> node)
    {
        <li>
            @label
            <ul>
            @if (node.Children.Count > 0)
            {
                @foreach (var (childNodeKey, childNode) in node.Children)
                {
                    var childNodeLabel = childNodeKey switch
                    {
                        DiscriminationTreeFunctionNodeKey functionNodeKey => $"function: {functionNodeKey.Identifier} (arity {functionNodeKey.ChildElementCount})",
                        DiscriminationTreeVariableNodeKey variableNodeKey => $"variable: #{variableNodeKey.Ordinal}",
                        _ => throw new ArgumentException(nameof(node))
                    };

                    RenderDiscriminationTreeNode(childNodeLabel, childNode);
                    }
                }
                else
                {
                    Term value;
                    try
                    {
                        value = node.Value;
                        <li>value: @value</li>
                    }
                    catch
                    {
                        // root node of empty tree is internal node that has no children
                    }
                }
            </ul>
        </li>
    }
}

<ul class="mt-4">
    @{
        RenderDiscriminationTreeNode("(root node)", discriminationTreeRootNode);
    }
</ul>

@code {
    private DiscriminationTreeDictionaryNode<Term> discriminationTreeRootNode;
    private DiscriminationTree discriminationTree;
    private FormData formData = new FormData("u, v, w, x, y, z", string.Empty);

    public DiscriminationTreeVisualiser()
    {
        discriminationTreeRootNode = new DiscriminationTreeDictionaryNode<Term>();
        discriminationTree = new DiscriminationTree(discriminationTreeRootNode);
    }

    private void Add(EditContext editContext)
    {
        if (editContext.Validate())
        {
            // TODO-FEATURE: probably useful to offer term parsing..
            var sentence = SentenceParser.BasicParser.Parse($"forall {formData.Variables}, P({formData.Term})");
            var visitor = new TermExtractor();
            visitor.Visit(sentence);
            discriminationTree.Add(visitor.Term!);
            StateHasChanged();
        }
    }

    private void RemoveAll(EditContext editContext)
    {
        discriminationTreeRootNode = new DiscriminationTreeDictionaryNode<Term>();
        discriminationTree = new DiscriminationTree(discriminationTreeRootNode);
        StateHasChanged();
    }

    private class FormData(string variables, string term) : IValidatableObject
    {
        public string Variables { get; set; } = variables;

        public string Term { get; set; } = term;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Yes, could cache the parse results to avoid parsing multiple times, but not worth it for now at least.
            // TODO-FEATURE: Some "TryParse.." methods might be useful - they'd certainly make this method a bit cleaner.
            // TODO-FEATURE: If we had a ParseError exception type, we could perhaps highlight the offending text.
            List<ValidationResult> errors = new();
            try
            {
                var sentence = SentenceParser.BasicParser.Parse($"forall {Variables}, P({Term})");
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(Term) }));
            }

            return errors;
        }
    }

    private class TermExtractor : RecursiveSentenceVisitor
    {
        public Term? Term { get; private set; }

        public override void Visit(Predicate predicate)
        {
            Term = predicate.Arguments.Single();
        }
    }
}