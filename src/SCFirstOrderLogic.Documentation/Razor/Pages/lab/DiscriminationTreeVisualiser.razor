@page "/lab/discrimination-tree-visualiser"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using SCFirstOrderLogic.SentenceManipulation
@using SCFirstOrderLogic.TermIndexing

<h3>Lab - Discrimination Tree Visualiser <Button Clicked="@(() => explanationModal!.Show())" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button></h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive visualiser for discrimination trees, as implemented by SCFirstOrderLogic (in the SCFirstOrderLogic.TermIndexing namespace).
            </p>
            <p>
                Discrimination trees are an indexing structure for terms that are particularly good for looking up generalisations of a query term.
                Each path from root to leaf in a discrimination tree consists of a depth-first traversal of the elements of the term that the leaf represents.
            </p>
            <p>
                Note that:
            </p>
            <ul>
                <li>This lab is admittedly a little rough around the edges with regards to the tree view itself (currently just nested unordered lists) and input validation. It'll be iterated upon.</li>
                <li>You can add terms to the tree by entering them into the Term text box and clicking the 'Add' button.</li>
                <li>When parsing the term, identifiers not followed by any parentheses (to indicate a function) will be interpreted as variables if they feature in the "variables" text box. Otherwise they will be interpreted as zero-arity functions (i.e. constants).</li>
                <li>Guidance for writing terms as strings can be found on the "getting started" page.</li>
                <li>The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/DiscriminationTreeVisualiser.razor">here</a>.</li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm EditContext="editContext" OnValidSubmit="HandleValidTermSubmission" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="variablesText">Variables (comma-separated)</label>
        <InputText class="form-control" id="variablesText" spellcheck="false" @bind-Value=formData!.Variables />
        <ValidationMessage For="@(() => formData.Variables)" />
    </div>
    <div class="form-group">
        <label for="queryText">Term</label>
        <InputText class="form-control" id="queryText" spellcheck="false" @bind-Value=formData!.Term />
        <ValidationMessage For="@(() => formData.Term)" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" class="btn btn-primary">Add</button>
        <button type="button" @onclick="HandleRemoveAllClick" class="btn btn-primary">Remove All</button>
    </div>
</EditForm>

<hr/>

<ul class="mt-4">
    @RenderTree(("(root node)", discriminationTreeRootNode))
</ul>

@code {
    private DiscriminationTreeDictionaryNode<Term> discriminationTreeRootNode;
    private DiscriminationTree discriminationTree;

    private Modal? explanationModal;
    private FormData formData;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    public DiscriminationTreeVisualiser()
    {
        discriminationTreeRootNode = new DiscriminationTreeDictionaryNode<Term>();
        discriminationTree = new DiscriminationTree(discriminationTreeRootNode);

        formData = new FormData("u, v, w, x, y, z", string.Empty);
        editContext = new(formData);
        editContext.OnValidationRequested += HandleValidationRequest;
        validationMessageStore = new(editContext);
    }

    private RenderFragment RenderTree((string rootLabel, IDiscriminationTreeNode<Term> rootNode) a)
    {
        return @<li>
            @a.rootLabel
            <ul>
                @if (a.rootNode.Children.Count > 0)
                {
                    foreach (var (childNodeKey, childNode) in a.rootNode.Children)
                    {
                        var childNodeLabel = childNodeKey switch
                        {
                            DiscriminationTreeFunctionNodeKey functionNodeKey => $"function: {functionNodeKey.Identifier} (arity {functionNodeKey.ChildElementCount})",
                            DiscriminationTreeVariableNodeKey variableNodeKey => $"variable: #{variableNodeKey.Ordinal}",
                            _ => throw new ArgumentException(nameof(a.rootNode))
                        };

                        @RenderTree((childNodeLabel, childNode))
                    }
                }
                else
                {
                    try
                    {
                        var value = a.rootNode.Value;
                        <li>value: @value</li>
                    }
                    catch
                    {
                        // root node of empty tree is internal node that has no children
                    }
                }
            </ul>
        </li>;
    }

    private void HandleValidationRequest(object? sender, ValidationRequestedEventArgs args)
    {
        validationMessageStore.Clear();
        editContext.Properties.Remove(nameof(formData.Term));

        if (!SentenceParser.Default.TryParseDeclarationList(formData.Variables, out var declarations, out var syntaxErrors))
        {
            foreach (var syntaxError in syntaxErrors)
            {
                validationMessageStore.Add(() => formData.Variables, syntaxError.ToString());
            }
        }
        else if (!SentenceParser.Default.TryParseTerm(formData.Term, declarations, out var term, out syntaxErrors))
        {
            foreach (var syntaxError in syntaxErrors)
            {
                validationMessageStore.Add(() => formData.Term, syntaxError.ToString());
            }
        }
        else if (discriminationTree.Contains(term))
        {
            validationMessageStore.Add(() => formData.Term, "Term already present in tree");
        }
        else
        {
            editContext.Properties[nameof(formData.Term)] = term;
        }
    }

    private void HandleValidTermSubmission()
    {
        discriminationTree.Add((Term)editContext.Properties[nameof(formData.Term)]);
        StateHasChanged();
    }

    private void HandleRemoveAllClick()
    {
        discriminationTreeRootNode = new DiscriminationTreeDictionaryNode<Term>();
        discriminationTree = new DiscriminationTree(discriminationTreeRootNode);
        StateHasChanged();
    }

    private class FormData(string variables, string term)
    {
        public string Variables { get; set; } = variables;
        public string Term { get; set; } = term;
    }
}