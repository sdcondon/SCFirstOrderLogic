@page "/lab/feature-vector-index-visualiser"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.ClauseIndexing
@using SCFirstOrderLogic.ClauseIndexing.Features
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using SCFirstOrderLogic.SentenceManipulation
@using SCFirstOrderLogic.SentenceManipulation.Normalisation
@using SCFirstOrderLogic.TermIndexing

<PageTitle>Lab - Feature Vector Index Visualiser</PageTitle>

<h3>
    Lab - Feature Vector Index Visualiser
    <Button Clicked="@(() => explanationModal!.Show())" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button>
</h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive visualiser for feature vector indices, as implemented by SCFirstOrderLogic.
            </p>
            <p>
                Feature vector indices (in this context, at least) are an indexing structure for CNF clauses that enable quick lookup of stored clauses that subsume or are subsumed by a query term.
                The general idea is that each stored clause and query clause, we calculate a set of "features" (essentially, metrics) that will always have a greater or equal value for subsumed clauses.
            </p>
            <p>
                Note that:
            </p>
            <ul>
                <li>You can add clauses to the tree by entering them into the Clause text box and clicking the 'Add' button.</li>
                <li>When parsing the clause, identifiers not followed by any parentheses (to indicate a function) will be interpreted as variables if they feature in the "variables" text box. Otherwise they will be interpreted as zero-arity functions (i.e. constants).</li>
                <li>Guidance for writing clauses as strings can be found on the "getting started" page.</li>
                <li>The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/FeatureVectorIndexVisualiser.razor">here</a>.</li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm EditContext="editContext" OnValidSubmit="HandleValidClauseSubmission" style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="featureSetSelect">Feature Set</label>
        <InputSelect class="form-control" id="featureSetSelect" disabled="@(index.Any())" @bind-Value=formData.FeatureSetDescription>
            @foreach (var key in FeatureSetOptions.Keys)
            {
                <option>@key</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="variablesText">Variables (comma-separated)</label>
        <InputText class="form-control" id="variablesText" spellcheck="false" @bind-Value=formData.Variables />
        <ValidationMessage For="@(() => formData.Variables)" />
    </div>
    <div class="form-group">
        <label for="queryText">Clause</label>
        <InputText class="form-control" id="queryText" spellcheck="false" @bind-Value=formData.Sentence />
        <ValidationMessage For="@(() => formData.Sentence)" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" @onclick="@(() => formData.Operation = Operations.Add)" class="btn btn-primary">Add</button>
        <button type="submit" @onclick="@(() => formData.Operation = Operations.Remove)" class="btn btn-primary">Remove</button>
        <button type="submit" @onclick="@(() => formData.Operation = Operations.RemoveSubsumed)" class="btn btn-primary">Remove Subsumed</button>
        <button type="submit" @onclick="@(() => formData.Operation = Operations.ReplaceSubsumed)" class="btn btn-primary">Replace Subsumed</button>
        <button type="button" @onclick="HandleRemoveAllClick" class="btn btn-primary">Remove All</button>
    </div>
</EditForm>

<hr/>

<ul class="mt-4" style="list-style-type: disc">
    @RenderTree("(root node)", rootNode)
</ul>

@code {
    private static Dictionary<string, Func<(FeatureVectorIndexListNode<MaxDepthFeature, CNFClause>, FeatureVectorIndex<MaxDepthFeature>)>> FeatureSetOptions = new()
    {
        ["Max Depth"] = () =>
        {
            var rootNode = new FeatureVectorIndexListNode<MaxDepthFeature, CNFClause>(MaxDepthFeature.MakeFeatureComparer(Comparer<string>.Default));
            var index = new FeatureVectorIndex<MaxDepthFeature>(MaxDepthFeature.MakeFeatureVector, rootNode);

            return (rootNode, index);
        }
    };

    // TODO: make these objects then switch on runtime type when doing stuff. Or 
    // of course change the lib so that we can have a common type. Likely a
    // breaking change - generic type design here is a bit clumsy..
    private FeatureVectorIndexListNode<MaxDepthFeature, CNFClause> rootNode;
    private FeatureVectorIndex<MaxDepthFeature> index;

    private Modal? explanationModal;
    private FormData formData;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    public FeatureVectorIndexVisualiser()
    {
        (rootNode, index) = FeatureSetOptions["Max Depth"].Invoke();

        formData = new FormData("Max Depth", "u, v, w, x, y, z", string.Empty);
        editContext = new(formData);
        editContext.OnValidationRequested += HandleValidationRequest;
        validationMessageStore = new(editContext);
    }

    private RenderFragment RenderTree(string rootLabel, IFeatureVectorIndexNode<MaxDepthFeature, CNFClause> rootNode)
    {
        return @<li>
            @rootLabel
            @if (rootNode.ChildrenAscending.Count() > 0)
            {
                <ul style="list-style-type: disc">
                    @foreach (var ((childFeature, childMagnitude), childNode) in rootNode.ChildrenAscending)
                    {
                        @RenderTree($"{childFeature}, magnitude: {childMagnitude}", childNode)
                    }
                </ul>
            }
            else
            {
                <ul style="list-style-type: square">
                    @foreach (var (_, clause) in rootNode.KeyValuePairs)
                    {
                        <li>Value: @clause</li>
                    }
                </ul>
            }
        </li>;
    }

    private void HandleValidationRequest(object? sender, ValidationRequestedEventArgs args)
    {
        validationMessageStore.Clear();
        editContext.Properties.Remove(nameof(formData.Sentence));

        if (!SentenceParser.Default.TryParseDeclarationList(formData.Variables, out var declarations, out var syntaxErrors))
        {
            foreach (var syntaxError in syntaxErrors)
            {
                validationMessageStore.Add(() => formData.Variables, syntaxError.ToString());
            }
        }
        else if (!SentenceParser.Default.TryParse(formData.Sentence, declarations, out var sentence, out var errors))
        {
            foreach (var error in errors)
            {
                validationMessageStore.Add(() => formData.Sentence, error.ToString());
            }
        }
        else
        {
            CNFClause clause;
            try
            {
                clause = new CNFClause(sentence);
            }
            catch (ArgumentException)
            {
                validationMessageStore.Add(() => formData.Sentence, "Must be a clause - a disjunction of literals");
                return;
            }

            if (formData.Operation == Operations.Add && index.Contains(clause))
            {
                validationMessageStore.Add(() => formData.Sentence, "Index already contains clause");
            }
            else
            {
                editContext.Properties[nameof(formData.Sentence)] = clause;
            }
        }
    }

    private void HandleValidClauseSubmission(EditContext editContext)
    {
        var clause = (CNFClause)editContext.Properties[nameof(formData.Sentence)];

        if (formData.Operation == Operations.Add)
        {
            index.Add(clause);
        }
        else if (formData.Operation == Operations.Remove)
        {
            index.Remove(clause);
        }
        else if (formData.Operation == Operations.RemoveSubsumed)
        {
            index.RemoveSubsumed(clause);
        }
        else if (formData.Operation == Operations.ReplaceSubsumed)
        {
            index.TryReplaceSubsumed(clause);
        }

        StateHasChanged();
    }

    private void HandleRemoveAllClick()
    {
        (rootNode, index) = FeatureSetOptions[formData.FeatureSetDescription].Invoke();
        StateHasChanged();
    }

    private class FormData(string featureSetDescription, string variables, string sentence)
    {
        public string FeatureSetDescription { get; set; } = featureSetDescription;
        public string Variables { get; set; } = variables;
        public string Sentence { get; set; } = sentence;
        public Operations? Operation { get; set; }
    }

    private enum Operations
    {
        Add,
        Remove,
        RemoveSubsumed,
        ReplaceSubsumed
    }
}