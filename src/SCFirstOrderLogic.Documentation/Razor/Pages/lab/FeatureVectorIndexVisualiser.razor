@page "/lab/feature-vector-index-visualiser"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.ClauseIndexing
@using SCFirstOrderLogic.ClauseIndexing.Features
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using SCFirstOrderLogic.SentenceManipulation
@using SCFirstOrderLogic.SentenceManipulation.Normalisation
@using SCFirstOrderLogic.TermIndexing
@using static SCFirstOrderLogic.SentenceCreation.SentenceFactory;

<h3>Lab - Feature Vector Index Visualiser <Button Clicked="@(() => explanationModal!.Show())" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button></h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive visualiser for feature vector indices, as implemented by SCFirstOrderLogic.
            </p>
            <p>
                Feature vector indices (in this context, at least) are an indexing structure for CNF clauses that enable quick lookup of stored clauses that subsume or are subsumed by a query term.
                The general idea is that each stored clause and query clause, we calculate a set of "features" (essentially, metrics) that will always have a greater or equal value for subsumed clauses.
            </p>
            <p>
                Note that:
            </p>
            <ul>
                <li>This lab is admittedly a little rough around the edges with regards to the tree view itself (currently just nested unordered lists) and input validation. It'll be iterated upon.</li>
                <li>You can add clauses to the tree by entering them into the Clause text box and clicking the 'Add' button.</li>
                <li>When parsing the clause, identifiers not followed by any parentheses (to indicate a function) will be interpreted as variables if they feature in the "variables" text box. Otherwise they will be interpreted as zero-arity functions (i.e. constants).</li>
                <li>Guidance for writing clauses as strings can be found on the "getting started" page.</li>
                <li>The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/FeatureVectorIndexVisualiser.razor">here</a>.</li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm EditContext="editContext" OnValidSubmit="HandleValidClauseSubmission" style=" font-family: monospace">
    <DataAnnotationsValidator />
    (TODO: allow choice of feature set)
    <div class="form-group">
        <label for="variablesText">Variables (comma-separated)</label>
        <InputText class="form-control" id="variablesText" spellcheck="false" @bind-Value=formData.Variables />
        <ValidationMessage For="@(() => formData.Variables)" />
    </div>
    <div class="form-group">
        <label for="queryText">Clause (or clauses - all will be added if it normalises to multi-clause sentence)</label>
        <InputText class="form-control" id="queryText" spellcheck="false" @bind-Value=formData.Sentence />
        <ValidationMessage For="@(() => formData.Sentence)" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" class="btn btn-primary">Add</button>
        <button type="button" @onclick="HandleRemoveAllClick" class="btn btn-primary">Remove All</button>
    </div>
</EditForm>

<hr/>

<ul class="mt-4">
    @RenderTree(("(root node)", rootNode))
</ul>

@code {
    private FeatureVectorIndexListNode<MaxDepthFeature, CNFClause> rootNode;
    private FeatureVectorIndex<MaxDepthFeature> index;

    private Modal? explanationModal;
    private FormData formData;
    private EditContext editContext;
    private ValidationMessageStore validationMessageStore;

    public FeatureVectorIndexVisualiser()
    {
        rootNode = new FeatureVectorIndexListNode<MaxDepthFeature, CNFClause>(MaxDepthFeature.MakeFeatureComparer(Comparer<string>.Default));
        index = new FeatureVectorIndex<MaxDepthFeature>(MaxDepthFeature.MakeFeatureVector, rootNode);

        formData = new FormData("u, v, w, x, y, z", string.Empty);
        editContext = new(formData);
        editContext.OnValidationRequested += HandleValidationRequest;
        validationMessageStore = new(editContext);
    }

    private RenderFragment RenderTree((string rootLabel, IFeatureVectorIndexNode<MaxDepthFeature, CNFClause> rootNode) a)
    {
        return @<li>
            @a.rootLabel
            <ul>
                @if (a.rootNode.ChildrenAscending.Count() > 0)
                {
                    foreach (var ((childFeature, childMagnitude), childNode) in a.rootNode.ChildrenAscending)
                    {
                        @RenderTree(($"Feature: {childFeature}, Magnitude: {childMagnitude}", childNode))
                    }
                }
                else
                {
                    foreach (var (_, clause) in a.rootNode.KeyValuePairs)
                    {
                        <li>Value: @clause</li>
                    }
                }
            </ul>
        </li>
    ;
    }

    private void HandleValidationRequest(object? sender, ValidationRequestedEventArgs args)
    {
        validationMessageStore.Clear();
        editContext.Properties.Remove(nameof(formData.Sentence));

        var variablesPreamble = "forall ";
        var sentencePreamble = $"{variablesPreamble}{formData.Variables}, ";

        Sentence sentence;
        try
        {
            sentence = SentenceParser.BasicParser.Parse($"{sentencePreamble}{formData.Sentence}");
        }
        catch (Exception e)
        {
            validationMessageStore.Add(() => formData.Sentence, e.Message);
            return;
        }

        var cnfSentence = sentence.ToCNF();
        var clauseAlreadyPresent = false;

        foreach (var clause in cnfSentence.Clauses)
        {
            if (index.Contains(clause))
            {
                validationMessageStore.Add(() => formData.Sentence, $"Index already contains clause '{clause}'");
                clauseAlreadyPresent = true;
            }
        }

        if (clauseAlreadyPresent)
        {
            return;
        }

        editContext.Properties[nameof(formData.Sentence)] = cnfSentence;
    }

    private void HandleValidClauseSubmission(EditContext editContext)
    {
        foreach (var clause in ((CNFSentence)editContext.Properties[nameof(formData.Sentence)]).Clauses)
        {
            index.Add(clause);
        }

        StateHasChanged();
    }

    private void HandleRemoveAllClick()
    {
        rootNode = new FeatureVectorIndexListNode<MaxDepthFeature, CNFClause>(MaxDepthFeature.MakeFeatureComparer(Comparer<string>.Default));
        index = new FeatureVectorIndex<MaxDepthFeature>(MaxDepthFeature.MakeFeatureVector, rootNode);
        StateHasChanged();
    }

    private class FormData(string variables, string sentence)
    {
        public string Variables { get; set; } = variables;
        public string Sentence { get; set; } = sentence;
    }
}