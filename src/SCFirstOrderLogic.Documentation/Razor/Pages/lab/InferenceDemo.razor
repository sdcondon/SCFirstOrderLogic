@page "/lab/inference-demo"

@using SCFirstOrderLogic;
@using SCFirstOrderLogic.ClauseIndexing.Features
@using SCFirstOrderLogic.ExampleDomains.FromAIaMA.Chapter9.UsingSentenceParser;
@using SCFirstOrderLogic.Inference;
@using SCFirstOrderLogic.Inference.Basic.BackwardChaining;
@using SCFirstOrderLogic.Inference.Basic.ForwardChaining;
@using SCFirstOrderLogic.Inference.Basic.Resolution;
@using SCFirstOrderLogic.SentenceCreation;
@using System.ComponentModel.DataAnnotations;
@using static SCFirstOrderLogic.SentenceCreation.SentenceFactory;
@inject IJSRuntime JS

<h3>Lab - Inference Demo <Button Clicked="ShowExplanationModal" Size="Size.Small" Color="Color.Primary"><Icon Name="@("bi-info-circle")"></Icon></Button></h3>

<Modal @ref="explanationModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Lab Explanation</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <p>
                This page is an interactive demonstration of inference with SCFirstOrderLogic that runs in your browser. Note that:
            </p>
            <ul>
                <li>
                    The knowledge base implementations offered here - which reside in the SCFirstOrderLogic.Inference.Basic package - are very basic, to the extent that it is very easy to create queries that they will struggle with.
                    The goal of this package is learning and experimentation more than anything else.
                    I am intending (assuming no one else beats me to it) to create some better KB implementations at some point.
                </li>
                <li>
                    Querying with this page is slower than it generally would be, due to limitations of the app framework used.
                    Blazor WASM's single-threaded nature necessitates the use of clause stores with some delays coded in, so as not to lock up the browser if a query takes a long time.
                </li>
                <li>Use the buttons at the top of the form to populate it with example queries, taken from "Artificial Intelligence: A Modern Approach".</li>
                <li>Guidance for writing sentences as strings can be found on the "getting started" page.</li>
                <li>
                    The source code for this page can be found <a href="https://github.com/sdcondon/SCFirstOrderLogic/blob/main/src/SCFirstOrderLogic.Documentation/Razor/Pages/lab/InferenceDemo.razor">here</a>.
                </li>
            </ul>
        </ModalBody>
    </ModalContent>
</Modal>

<EditForm Model=@formData OnSubmit=@HandleFormSubmission style="font-family: monospace">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Presets</label>
        <div>
            @foreach (var kvp in Presets)
            {
                <button @onclick="@(() => formData = kvp.Value.Invoke())">@kvp.Key</button>
                @(" ")
            }
        </div>
    </div>
    <div class="form-group">
        <label for="kbTypeSelect">Knowledge Base Type</label>
        <InputSelect class="form-control" id="kbTypeSelect" @bind-Value=formData.KnowledgeBaseDescription>
            @foreach (var key in KnowledgeBaseOptions.Keys)
            {
                <option>@key</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="factsTextArea">Knowledge</label>
        <InputTextArea class="form-control" id="factsTextArea" spellcheck="false" @bind-Value=formData.Knowledge rows="8" />
        <ValidationMessage For="@(() => formData.Knowledge)" />
    </div>
    <div class="form-group">
        <label for="queryText">Query</label>
        <InputText class="form-control" id="queryText" spellcheck="false" @bind-Value=formData.Query />
        <ValidationMessage For="() => formData.Query" />
    </div>
    <div class="form-group mt-2">
        <button type="submit" class="btn btn-primary" disabled="@(currentQueryExecution != null && !currentQueryExecution.IsCompleted)">Submit</button>
    </div>
</EditForm>

@if (currentQueryExecution != null)
{
    if (currentQueryExecution.IsCompletedSuccessfully)
    {
        <div class="alert alert-success mt-4" role="alert">
            <h3>Query Complete</h3>
            <p><pre>Query result: @currentQuery!.Result</pre></p>

            @if (currentQuery!.Result)
            {
                var details = currentQuery! switch
                {
                    BackwardChainingQuery bcq => bcq.ResultExplanation,
                    ForwardChainingQuery fcq => fcq.ResultExplanation,
                    ResolutionQuery rq => rq.ResultExplanation,
                    _ => "?"
                };

                <p><pre>@details</pre></p>
            }
        </div>
    }
    else if (currentQueryExecution.IsCanceled)
    {
        <div class="alert alert-warning mt-4" role="alert">
            <h3>Query Cancelled</h3>
        </div>
    }
    else if (currentQueryExecution.IsFaulted)
    {
        <div class="alert alert-danger mt-4" role="alert">
            <h3>Query Failed</h3>
            <p>
                Here are the details of the exception that was thrown:
            </p>
            @foreach (var e in currentQueryExecution.Exception!.InnerExceptions)
            {
                <p><pre>@(e.ToString())</pre></p>
            }
        </div>
    }
    else
    {
        <div class="alert alert-primary mt-4" role="alert">
            <h3>Query In Progress</h3>
            <p>
                If you see this for more than a few seconds, the chances are you've fashioned a query that the current KB implementation can't deal with.
                Click the "Cancel Query" button to abort.
            </p>
            <p>
                <button type="button" class="btn btn-secondary" @onclick=@(() => currentQueryCancellation?.Cancel())>Cancel Query</button>
            </p>
        </div>
    }
}

@code {
    private static Dictionary<string, Func<IKnowledgeBase>> KnowledgeBaseOptions = new()
    {
        ["Basic Backward Chaining"] = () => new BackwardChainingKnowledgeBase(
            new BlazorWasmBCClauseStore()),

        ["Basic Forward Chaining"] = () => new ForwardChainingKnowledgeBase(
            new BlazorWasmFCClauseStore()),

        ["Resolution (Basic, Unit Preference)"] = () => new ResolutionKnowledgeBase(new DelegateResolutionStrategy(
            new BlazorWasmResClauseStore(),
            ClauseResolutionFilters.None,
            ClauseResolutionPriorityComparisons.UnitPreference)),

        ["Resolution (Linear, Feature Vector Index Clause Storage)"] = () => new ResolutionKnowledgeBase(new LinearResolutionStrategy(
            new BlazorWasmFVIResClauseStore<MaxDepthFeature>(
                MaxDepthFeature.MakeFeatureVector,
                new ClauseStoreFVIListNode<MaxDepthFeature>(MaxDepthFeature.MakeFeatureComparer())),
            ClauseResolutionPriorityComparisons.UnitPreference)),
    };

    private static Dictionary<string, Func<FormData>> Presets = new()
    {
        ["[Empty]"] = () => new(
                knowledgeBaseDescription: "Resolution (Linear, Feature Vector Index Clause Storage)",
            knowledge: string.Empty,
            query: string.Empty),

        ["Crime"] = () => new(
            knowledgeBaseDescription: "Basic Backward Chaining",
            knowledge: string.Join(Environment.NewLine, CrimeDomain.UnparsedAxioms),
            query: CrimeDomain.UnparsedExampleQuery),

        ["Curiousity and the Cat"] = () => new(
            knowledgeBaseDescription: "Resolution (Linear, Feature Vector Index Clause Storage)",
            knowledge: string.Join(Environment.NewLine, CuriousityAndTheCatDomain.UnparsedAxioms),
            query: CuriousityAndTheCatDomain.UnparsedExampleQuery),
    };

    private Modal? explanationModal;
    private FormData formData = Presets["Crime"].Invoke();

    private CancellationTokenSource? currentQueryCancellation;
    private IQuery? currentQuery;
    private Task? currentQueryExecution;

    private Task ShowExplanationModal() => explanationModal!.Show();

    private async Task HandleFormSubmission(EditContext editContext)
    {
        if (editContext.Validate())
        {
            try
            {
                // Instantiate and start the new query, then re-render (to e.g. disable the submit button).
                currentQueryCancellation = new CancellationTokenSource();
                currentQuery = await MakeQueryAsync(formData, currentQueryCancellation.Token);
                currentQueryExecution = currentQuery.ExecuteAsync(currentQueryCancellation.Token);
                await InvokeAsync(StateHasChanged);

                // Await query completion, then re-render (to e.g. re-enable the submit button).    
                await currentQueryExecution;
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                // yes, this is a little ugly. hoping to be able to refactor this into
                // a single task with some continuewiths (though the inline if-else on
                // task state will likely need to change a little, too).
                if (e is not TaskCanceledException)
                {
                    currentQueryExecution = Task.FromException(e);
                }
            }
        }
    }

    private async Task<IQuery> MakeQueryAsync(FormData formData, CancellationToken cancellationToken)
    {
        IKnowledgeBase knowledgeBase = KnowledgeBaseOptions[formData.KnowledgeBaseDescription].Invoke();
        await knowledgeBase.TellAsync(SentenceParser.BasicParser.ParseList(formData.Knowledge), cancellationToken);

        return await knowledgeBase.CreateQueryAsync(SentenceParser.BasicParser.Parse(formData.Query), cancellationToken);
    }

    private class FormData : IValidatableObject
    {
        public FormData(string knowledgeBaseDescription, string knowledge, string query)
        {
            this.KnowledgeBaseDescription = knowledgeBaseDescription;
            this.Knowledge = knowledge;
            this.Query = query;
        }

        public string KnowledgeBaseDescription { get; set; }

        public string Knowledge { get; set; }

        public string Query { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            // Yes, could cache the parse results to avoid parsing multiple times, but not worth it for now at least.
            // TODO-FEATURE: Some "TryParse.." methods might be useful - they'd certainly make this method a bit cleaner.
            // TODO-FEATURE: If we had a ParseError exception type, we could perhaps highlight the offending text.
            Sentence[] knowledge;
            Sentence query;

            List<ValidationResult> errors = new();
            try
            {
                knowledge = SentenceParser.BasicParser.ParseList(Knowledge);
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(Knowledge) }));
            }

            try
            {
                query = SentenceParser.BasicParser.Parse(Query);
            }
            catch (Exception e)
            {
                errors.Add(new ValidationResult(e.Message, new[] { nameof(Query) }));
            }

            return errors;
        }
    }
}