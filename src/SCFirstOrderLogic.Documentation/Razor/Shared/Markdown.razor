<!-- ..because HTML is annoying and Markdig is great.. -->
@using System.Linq;
@using Markdig
@using Markdig.Renderers
@using Markdig.Renderers.Html
@using Markdig.Syntax
@using System.Reflection
@inherits ComponentBase
@inject IJSRuntime JS

<div class="markdown-container">
    @markup
</div>

@code {
    private MarkupString markup;

    [Parameter]
    public required string ResourceName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var pipeline = new MarkdownPipelineBuilder()
            .Use(new Extension())
            .UseAutoIdentifiers()
            .UseTaskLists()
            .UsePipeTables()
            .UseBootstrap()
            .Build();

        using var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(ResourceName) ?? throw new ArgumentException($"Resource '{ResourceName}' not found");
        using var reader = new StreamReader(stream);

        markup = new MarkupString(Markdig.Markdown.ToHtml(await reader.ReadToEndAsync(), pipeline));
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JS.InvokeVoidAsync("hljs.highlightAll");
    }

    public class Extension : IMarkdownExtension
    {
        public void Setup(MarkdownPipelineBuilder pipeline)
        {
        }

        public void Setup(MarkdownPipeline pipeline, IMarkdownRenderer renderer)
        {
            var htmlRenderer = renderer as Markdig.Renderers.HtmlRenderer;

            ObjectRendererCollection? objectRenderers = htmlRenderer?.ObjectRenderers;

            if (objectRenderers != null && !objectRenderers.Contains<PrettyPrintCodeBlockRenderer>())
            {
                var codeBlockRenderer = objectRenderers.OfType<CodeBlockRenderer>().SingleOrDefault() ?? new CodeBlockRenderer();
                objectRenderers.Replace<CodeBlockRenderer>(new PrettyPrintCodeBlockRenderer(codeBlockRenderer));
            }
        }
    }

    private class PrettyPrintCodeBlockRenderer(CodeBlockRenderer innerRenderer) : HtmlObjectRenderer<CodeBlock>
    {
        protected override void Write(Markdig.Renderers.HtmlRenderer renderer, CodeBlock obj)
        {
            if (obj is FencedCodeBlock fencedCodeBlock)
            {
                var attr = obj.TryGetAttributes() ?? new();
                attr.AddClass("language-csharp");
                obj.SetAttributes(attr);
            }

            innerRenderer.Write(renderer, obj);
        }
    }
}
